import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.InetAddress;

/**
 * This class represents a C-DHCP message packet.
 * @author Tanushree & Mrunal
 * @version 1.0 
 */

public class DHCPMessage 
{
	private byte op;//Operation Code
	private byte hType;//Hardware Type used for the local network
	private byte hLen;//Hardware Address Length
	private byte mbz;//Hops: hard coded as zero
	
	private byte[] xid = new byte[4];//Transaction Identifier(4 bytes) generated by client
	private byte[] secs = new byte[2];//Seconds(2 byte):Number of seconds elapsed since a client began an attempt to acquire or renew a lease. 
	private byte[] flags = new byte[2];//Flags(2 byte):1 bit broadcast flag,15 bit reserved for future use

	private static byte[] cIAddr;//Client IP Address(4 byte)
	private byte[] yIAddr;//"Your" IP Address(4 byte)
	private static byte[] sIAddr;//Server IP Address(4 byte)
	private byte[] cHAddr;//Client Hardware Address(16 bytes)
	private DHCPOptions options;//Options(variable size)
	
	//op types
	private static final int BOOTREQUEST = 1;
	@SuppressWarnings("unused")
	private static final int BOOTREPLY = 2;
	private static final int BOOTREQUEST_I = 5;
	@SuppressWarnings("unused")
	private static final int BOOTREPLY_I = 6;
	private static final int BOOTREQUEST_S = 9;
	@SuppressWarnings("unused")
	private static final int BOOTREPLY_S = 10;
	private static final int BOOTREQUEST_SI = 13;
	@SuppressWarnings("unused")
	private static final int BOOTREPLY_SI = 14;
	private static final int ETHERNET10MB = 1;
	
	
	
	//DHCP Message Types
	public static final int DHCPDISCOVER = 1;
	public static final int DHCPOFFER = 2;
	public static final int DHCPREQUEST = 3;
	public static final int DHCPDECLINE = 4;
	public static final int DHCPACK = 5;
	public static final int DHCPNAK = 6;
	public static final int DHCPRELEASE = 7;
	
	//DHCP Option Identifiers
	public static final int DHCPMESSAGETYPE = 53;
	public static final int SUBNET = 1;

	
	/*Constructor*/
	public DHCPMessage() 
	{
		cIAddr = new byte[4];
		yIAddr = new byte[4];
		sIAddr = new byte[4];
		cHAddr = new byte[16];
		options = new DHCPOptions();
	}
	
	
	
	/**
	* discoverMsg() : Discovery message sent by client.
	* @param clientMacAddr,type. 
	* @exception IOException On input error.
	* @see IOException
	*/
	public byte[] discoverMsg(byte[] clientMacAddr,String type) throws IOException 
	{
		if(type.equals("1"))
			op = BOOTREQUEST_I;
		else if(type.equals("2"))
		{
			op = BOOTREQUEST_S;
			setFields();
		}
		else if(type.equals("3"))
			op = BOOTREQUEST_SI;
		
		hType = ETHERNET10MB; 
		hLen = 6;
		mbz = 0; 
		xid = hexStringToByteArray("21274A1D"); 
		secs = new byte[] { 0, 0};  
		flags = new byte[] { (byte) 128, 0}; //Discovery Message is broadcasted.
		cHAddr = clientMacAddr; 
				
		options.setOptionData(DHCPMESSAGETYPE, new byte[]{(byte)DHCPDISCOVER});//adding DHCP message of DHCPDISCOVER to options field.
		if(type.equals("2") | type.equals("3"))
		{
			options.setOptionData(SUBNET, new byte[]{ 0,0,0,0 });//if request is for subnet, Subnet option is added to options field.
		}
		return this.convertToByteArray();//Convert message object to a byte array.
	}
	
	
	
	/**
	* releaseMsg() : Release message sent by client.
	* @param clientMacAddr 
	* @exception IOException On input error.
	* @see IOException
	*/
	public byte[] releaseMsg(byte[] clientMacAddr) throws IOException 
	{
		
		op = BOOTREQUEST;
		hType = ETHERNET10MB; 
		hLen = 6;
		mbz = 0; 
		xid = hexStringToByteArray("23AB45DE"); 
		secs = new byte[] { 0, 0};  
		flags = new byte[] { 0, 0}; 
		yIAddr = new byte[] { 0, 0, 0, 0};
		cHAddr = clientMacAddr;
		setFields();//Sets the ip address allocated to client and server ip in the DHCPRELEASE message. 
		options.setOptionData(DHCPMESSAGETYPE, new byte[]{(byte)DHCPRELEASE});//adding DHCP message of DHCPRELEASE to options field.
		return this.convertToByteArray();//Convert message object to a byte array.
	}
	
	
	/**
	 * Converts a DHCPMessage object to a byte array.
	 * @return  a byte array with information from DHCPMessage object.
	 */
	public byte[] convertToByteArray() 
	{
		int staticSize = 30;
		/* op = 1 byte
		   hType = 1 byte
		   hLen = 1 byte
		   mbz = 1 byte
		   xid= 4 bytes
		   secs = 2 bytes 
	       flags = 2 bytes
	       cIAddr = 4 bytes
      	   yIAddr = 4 bytes
	       sIAddr = 4 bytes
		   cHAddr = 6 bytes
		   
		   Total = 30 bytes		 */		
		
		byte[] optn = this.options.externalize();
		byte[] msg = new byte[64];
		
		//add each field to the message array
		msg[0] = this.op;
		msg[1] = this.hType;
		msg[2] = this.hLen;
		msg[3] = this.mbz;
		
		for (int i=0; i < 4; i++) msg[4+i] = xid[i];
		for (int i=0; i < 2; i++) msg[8+i] = secs[i];
		for (int i=0; i < 2; i++) msg[10+i] = flags[i];
		for (int i=0; i < 4; i++) msg[12+i] = cIAddr[i];
		for (int i=0; i < 4; i++) msg[16+i] = yIAddr[i];
		for (int i=0; i < 4; i++)msg[20+i] = sIAddr[i];
		for (int i=0; i < hLen; i++)msg[24+i] = cHAddr[i];
		for (int i=0; i < optn.length; i++) msg[staticSize+i] = optn[i];
      
		return msg;
	}

	
	/*Getter and setter methods*/
	//op
	public byte getOp() 
	{
		return op;
	}

	public void setOp(byte op) 
	{
		this.op = op;
	}

	//htype
	public byte getHType() 
	{
		return hType;
	}

	public void setHType(byte type) 
	{
		hType = type;
	}

	//hlen
	public byte getHLen() 
	{
		return hLen;
	}

	public void setHLen(byte len) 
	{
		hLen = len;
	}

	//not used
	public byte getMbz() 
	{
		return mbz;
	}

	public void setMbz() 
	{
		mbz = 0;
	}

	//xid
	public byte[] getXid() 
	{
		return xid;
	}

	public void setXid(byte[] xid)
	{
		this.xid = xid;
	}

	//secs
	public byte[] getSecs() 
	{
		return secs;
	}

	public void setSecs(byte[] secs) 
	{
		this.secs = secs;
	}

	//flags
	public byte[] getFlags() 
	{
		return flags;
	}

	public void setFlags(byte[] flags) 
	{
		this.flags = flags;
	}

	//ciaddr
	public byte[] getCIAddr() 
	{
		return cIAddr;
	}

	public void setCIAddr(byte[] addr)
	{
		cIAddr = addr;
	}

	//yiaddr
	public byte[] getYIAddr() 
	{
		return yIAddr;
	}

	public void setYIAddr(byte[] addr) 
	{
		yIAddr = addr;
	}

	//siaddr
	public byte[] getSIAddr() 
	{
		return sIAddr;
	}

	public void setSIAddr(byte[] addr) 
	{
		sIAddr = addr;
	}

	//chaddr
	public byte[] getCHAddr() 
	{
		return cHAddr;
	}

	public void setCHAddr(byte[] addr)
	{
		cHAddr = addr;
	}

	//options
	public byte[] getOptions() 
	{
		return options.externalize();
	}
			
	
	/**
	* This method converts a byte array to a hex string.
	* @return sb hex string.
	*/
	public static String byteArrayToHex(byte[] a) 
	{
		   StringBuilder sb = new StringBuilder();
		   for(byte b: a)
		   {
		      sb.append(String.format("%02x ", b&0xff));
		   }
		   return sb.toString();
	}


	/**
	* This method converts a hex string to a byte array.
	* @return data byte array of hex string.
	*/
	public static byte[] hexStringToByteArray(String s) 
	{
	    int len = s.length();
	    byte[] data = new byte[len / 2];
	    for (int i = 0; i < len; i += 2) 
	    {
	        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)+ Character.digit(s.charAt(i+1), 16));
	    }
	    return data;
	}
	
	/**
	* setFields method sets ciaddr and siaddr fields of DHCP Message.
	* @exception IOException On input error.
	* @see IOException
	*/

	public static void setFields() throws IOException
	{
		File f = new File("parameters.txt");//This file contains the ip allocated to client and C-DHCP server ip
		if(f.exists())
		{
			BufferedReader br= new BufferedReader(new FileReader(f));
			
			String c_ip = br.readLine();
			String s_ip = br.readLine();
			br.close();
			
			cIAddr = new byte[4];
			cIAddr = InetAddress.getByName(c_ip).getAddress();
			sIAddr = new byte[4];
			sIAddr = InetAddress.getByName(s_ip).getAddress();
		}
		else
		{
			cIAddr = new byte[] { 0, 0, 0, 0};
			sIAddr = new byte[] { 0, 0, 0, 0};
		}
		
	}
	
	
	public String toString() 
	{
		String msg = new String();
		
		msg += "Operation Code: " + op + "\n";
		msg += "Hardware Type: " + hType  + "\n";
		msg += "Hardware Length: " + hLen  + "\n";
		msg += "Not Used: " + mbz + "\n";
		
		msg += "xid: "+byteArrayToHex(xid) + "\n";
		msg += "secs: "+secs[0]+" "+secs[1] + "\n";
		msg += "flags: "+(flags[0] & 0xFF)+" "+flags[1]+ "\n";
		msg += "ciaddr: "+(cIAddr[0]& 0xFF)+"."+(cIAddr[1]& 0xFF)+"."+(cIAddr[2]& 0xFF)+"."+(cIAddr[3]& 0xFF) + "\n";
		msg += "yiaddr: "+(yIAddr[0]& 0xFF)+"."+(yIAddr[1]& 0xFF)+"."+(yIAddr[2]& 0xFF)+"."+(yIAddr[3]& 0xFF) + "\n";
		msg += "siaddr: "+(sIAddr[0]& 0xFF)+"."+(sIAddr[1]& 0xFF)+"."+(sIAddr[2]& 0xFF)+"."+(sIAddr[3]& 0xFF) + "\n";
		msg += "chaddr: " + byteArrayToHex(cHAddr)+ "\n";
   	    msg += options.toString() + "\n";
		
		return msg;
	}
	
	
}
     